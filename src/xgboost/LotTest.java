package xgboost;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.dmlc.xgboost4j.Booster;
import org.dmlc.xgboost4j.DMatrix;
import org.dmlc.xgboost4j.util.Trainer;

import xjboostDemo.util.CustomEval;
import xjboostDemo.util.Params;

import org.dmlc.xgboost4j.util.XGBoostError;

public class LotTest {
	public static void main(String[] args) throws XGBoostError, FileNotFoundException, UnsupportedEncodingException, IOException {
		// load file from text file, also binary buffer generated by xgboost4j
		String sourceFileNameTrain = "D:/DataForMining/Lot/xgboosttrain";
		String sourceFileNameTest = "D:/DataForMining/Lot/xgboosttest";
		String destFileName = "D:/DataForMining/Lot/tout.txt";
		String dumpModelFileName = "D:/DataForMining/Lot/tdumpmodel.txt";
		DMatrix trainMat = new DMatrix(sourceFileNameTrain);
		DMatrix testMat = new DMatrix(sourceFileNameTest);
		// 测试集需要有各种类型结果,0和1

		// specify parameters
		Params param = new Params() {
			{
				put("eta", 1);
				put("max_depth", 3);
				put("eval_metric", "auc");
				put("silent", 1);
				put("objective", "binary:logistic");// 分类类型(multi:softmax)
			}
		};

		// specify watchList
		List<Map.Entry<String, DMatrix>> watchs = new ArrayList<>();
		watchs.add(new AbstractMap.SimpleEntry<>("train", trainMat));
		watchs.add(new AbstractMap.SimpleEntry<>("test", testMat));

		// train a booster
		int round = 100;
		Booster booster = Trainer.train(param, trainMat, round, watchs, null, null);
		// predict use 1 tree
		float[][] predicts1 = booster.predict(testMat, false, 1);
		// by default all trees are used to do predict
		float[][] predicts2 = booster.predict(testMat);
		booster.saveModel("D:/DataForMining/Lot/t.model");
		booster.dumpModel(dumpModelFileName, true);
		// use a simple evaluation class to check error result
		CustomEval eval = new CustomEval();
		System.out.println("error of predicts1: " + eval.eval(predicts1, testMat));
		System.out.println("error of predicts2: " + eval.eval(predicts2, testMat));

		// 结果输出(预测+原test集)
		String strline = null;
		// whether the file is exists
		File file = new File(sourceFileNameTest);
		if (!file.exists()) {
			System.out.println("file not exists!");
			return;
		}
		try {
			BufferedReader br = new BufferedReader(new FileReader(sourceFileNameTest));
			FileWriter fw = new FileWriter(destFileName);
			int count = 0;
			while ((strline = br.readLine()) != null) {
				// System.out.println(count);
				fw.write(predicts2[count][0] + "|" + strline.trim() + "\n");
				count++;
			}
			fw.close();
			br.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
