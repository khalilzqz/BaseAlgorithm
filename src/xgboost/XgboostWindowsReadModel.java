package xgboost;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import org.dmlc.xgboost4j.Booster;
import org.dmlc.xgboost4j.DMatrix;
import org.dmlc.xgboost4j.demo.util.CustomEval;
import org.dmlc.xgboost4j.demo.util.Params;
import org.dmlc.xgboost4j.util.XGBoostError;

public class XgboostWindowsReadModel {
	public static void main(String[] args)
			throws XGBoostError, FileNotFoundException, UnsupportedEncodingException, IOException {
		// load file from text file, also binary buffer generated by xgboost4j
		String sourceFileNameTest = "D:/DataForMining/taolu/dataA48/taolu2x.test";
		String destFileName = "D:/DataForMining/taolu/dataA48/taolu2x.out";
		String ModelFileName = "D:/DataForMining/taolu/taolu2.model";
		DMatrix testMat = new DMatrix(sourceFileNameTest);
		// 测试集需要有各种类型结果,0和1

		// specify parameters
		Params param = new Params() {
			{
				put("eta", 0.1);
				put("max_depth", 7);
				put("eval_metric", "auc");
				put("silent", 1);
				// (reg:linear)
				// (multi:softmax)
				put("objective", "binary:logistic");
				put("nthread", -1);
				put("gamma", 0);
				put("min_child_weight", 1);
				put("max_delta_step", 0);
				put("subsample", 0.85);
				put("colsample_bytree", 0.7);
				put(" colsample_bylevel", 1);
				put("reg_alpha", 0);
				put("reg_lambda", 1);
				put("scale_pos_weight", 1);
				put("seed", 1440);
			}
		};

		Booster booster = new Booster(param, ModelFileName);
		// by default all trees are used to do predict
		float[][] predicts2 = booster.predict(testMat);
		// use a simple evaluation class to check error result
		CustomEval eval = new CustomEval();
		System.out.println("Correctness of predicts2: " + eval.eval(predicts2, testMat));
		System.out.println(booster.getFeatureScore());
		// 结果输出(预测+原test集)
		String strline = null;
		// whether the file is exists
		File file = new File(sourceFileNameTest);
		if (!file.exists()) {
			System.out.println("file not exists!");
			return;
		}
		try {
			BufferedReader br = new BufferedReader(new FileReader(sourceFileNameTest));
			FileWriter fw = new FileWriter(destFileName);
			int count = 0;
			while ((strline = br.readLine()) != null) {
				// System.out.println(count);
				if (predicts2[count][0] >= 0.5 || predicts2[count][0] < 0.5) {
					fw.write(predicts2[count][0] + "|" + strline.trim() + "\n");
				}
				count++;
			}
			fw.close();
			br.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch bl ock
			e.printStackTrace();
		}
	}
}
